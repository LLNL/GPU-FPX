--- ./record_reg_vals/common.h	2024-12-12 14:29:26.000000000 -0700
+++ ./GPU-FPX/utility/common.h	2024-12-17 12:35:09.029056101 -0700
@@ -1,34 +1,31 @@
-/*
- * SPDX-FileCopyrightText: Copyright (c) 2019 NVIDIA CORPORATION & AFFILIATES.
- * All rights reserved.
- * SPDX-License-Identifier: BSD-3-Clause
+/* Copyright (c) 2019, NVIDIA CORPORATION. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are met:
- *
- * 1. Redistributions of source code must retain the above copyright notice, this
- * list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright notice,
- * this list of conditions and the following disclaimer in the documentation
- * and/or other materials provided with the distribution.
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *  * Neither the name of NVIDIA CORPORATION nor the names of its
+ *    contributors may be used to endorse or promote products derived
+ *    from this software without specific prior written permission.
  *
- * 3. Neither the name of the copyright holder nor the names of its
- * contributors may be used to endorse or promote products derived from
- * this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
-
+#ifndef COMMON_H
+#define COMMON_H
 #include <stdint.h>
 
 /* information collected in the instrumentation function and passed
@@ -39,7 +36,67 @@
     int32_t cta_id_z;
     int32_t warp_id;
     int32_t opcode_id;
-    int32_t num_regs;
+    int32_t kernel_id;
+    //int32_t num_regs;
     /* 32 lanes, each thread can store up to 5 register values */
-    uint32_t reg_vals[32][8];
+    //uint32_t reg_vals[32][8];
+    /* code location (file, line) */
+    //char *location;
+    //int32_t loc_id;
+    /* Instruction type: FP32=1, FP64=2 */
+    //int32_t inst_type;
+    uint32_t mem_index;
+    uint32_t mem_index_ar[32];
+    uint32_t exce_type[32];
+    uint32_t warp_exec_info[32];
+    //uint32_t reg_vals[32][2];
 } reg_info_t;
+
+typedef struct { 
+    uint32_t mem_index_ar[32];
+    uint32_t exce_type[32];
+    //uint32_t reg_vals[32][2];
+} warp_info_t;
+
+typedef struct {
+    int32_t cta_id_x;
+    int32_t opcode_id;
+    int32_t kernel_id;
+    int32_t loc_id;
+    int32_t num_regs;
+    uint32_t with_lit_except;
+    uint32_t after_before;
+    uint32_t reg_types[32][4];
+} except_type_info_t;
+/*
+ Here we start the type as 1 to aviod the the issue when using `__shfl_sync` to 
+ extract the values from all active threads; inactive threads will return undefined
+ value, which is 0 for int. 
+
+ We need to notcie that we have to minus 1 when doing the map
+*/
+enum ExceptionType {
+    E_NAN=1,
+    E_INF,
+    E_SUB,
+    E_DIV0,
+    NUM_EXCE_TYPES,
+};
+enum ExceptionAnaType {
+    Ana_SUB=0, /*Consider SUB as a normal val now. Will support SUB in the future*/
+    Ana_NAN,
+    Ana_INF,
+    NUM_ANA_TYPES,
+};
+enum FormatType {
+    FP32=1,
+    FP64,
+    NUM_FP_TYPES,
+};
+ #endif
+
+
+
+
+
+
